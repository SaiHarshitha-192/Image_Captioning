# -*- coding: utf-8 -*-
"""CNN_TEXT_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ud5L7O0OszY4pxIEeXFOJUQIyctyR6UK
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import pickle
import numpy as np
from tqdm.notebook import tqdm

from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical, plot_model
from tensorflow.keras.layers import Input, Dense, LSTM, Embedding, Dropout, add

# !unzip /content/drive/MyDrive/major_project/flickr8k.zip

BASE_DIR = '/content/flickr8k'
WORKING_DIR = '/content/drive/MyDrive/major_project/Working'

# load vgg16 model
model = VGG16()
# restructure the model
model = Model(inputs=model.inputs, outputs=model.layers[-2].output)
# # summarize
print(model.summary())

import pickle

pickle_filename = WORKING_DIR+"/visual_features.pkl"

with open(pickle_filename, 'rb') as f:
    vis_feat = pickle.load(f)

print(vis_feat.keys())
print("Length of the loaded dictionary:", len(vis_feat))
vis_feat['1001773457_577c3a7d70'].shape

import pickle

pickle_filename = WORKING_DIR+"/textual_features.pkl"

with open(pickle_filename, 'rb') as f:
    tf = pickle.load(f)

print(tf.keys())
print("Length of the loaded dictionary:", len(tf))
tf['1001773457_577c3a7d70'].shape

import pickle
import numpy as np

pickle_filename = WORKING_DIR + "/textual_features.pkl"

with open(pickle_filename, 'rb') as f:
    tf = pickle.load(f)

print(tf.keys())
print("Length of the loaded dictionary:", len(tf))

text_feat = {}

for key, arr in tf.items():
    # If the array is not empty
    if arr.size > 0:
        # Compute the mean along the first axis (rows)
        averaged_arr = np.mean(arr, axis=0)
    else:
        # If the array is empty, create a zero-filled array of shape (300,)
        averaged_arr = np.zeros(300)
    text_feat[key] = averaged_arr

print("Number of files with textual features:", len(text_feat))
# Example: Print shape of textual feature for a specific key
print("Shape of textual feature for key '1000268201_693b08cb0e':", text_feat['1000268201_693b08cb0e'].shape)
#print(text_feat['1001773457_577c3a7d70'])

pickle_filename = WORKING_DIR+"/mapping.pkl"

with open(pickle_filename, 'rb') as f:
    mapping = pickle.load(f)

print(mapping.keys())
print("Length of the loaded dictionary:", len(mapping))
mapping['1001773457_577c3a7d70']

all_captions = []
for key in mapping:
    for caption in mapping[key]:
        all_captions.append(caption)

len(all_captions)

all_captions[:10]

# tokenize the text
tokenizer = Tokenizer()
tokenizer.fit_on_texts(all_captions)
vocab_size = len(tokenizer.word_index) + 1

vocab_size

# get maximum length of the caption available
max_length = max(len(caption.split()) for caption in all_captions)
max_length

image_ids = list(mapping.keys())
split = int(len(image_ids) * 0.80)
train = image_ids[:split]
test = image_ids[split:]

print(train)

def data_generator(data_keys, mapping, vis_features, text_features, tokenizer, max_length, vocab_size, batch_size):
    X1, X2, X3, y = [], [], [], []
    n = 0
    while True:
        for key in data_keys:
            n += 1
            captions = mapping[key]
            for caption in captions:
                seq = tokenizer.texts_to_sequences([caption])[0]
                for i in range(1, len(seq)):
                    in_seq, out_seq = seq[:i], seq[i]
                    in_seq = pad_sequences([in_seq], maxlen=max_length)[0]
                    out_seq = to_categorical([out_seq], num_classes=vocab_size)[0]

                    X1.append(vis_features[key][0])  # Visual features
                    X2.append(text_features[key])     # Textual features
                    X3.append(in_seq)                 # Input sequence
                    y.append(out_seq)                 # Output sequence

            if n == batch_size:
                '''print(np.array(X1).shape)
                print(np.array(X2).shape)
                print(np.array(X3).shape)'''

                yield [np.array(X1), np.array(X2), np.array(X3)], np.array(y)
                X1, X2, X3, y = [], [], [], []
                n = 0

from keras.layers import concatenate, Input, Dense, Dropout, LSTM, Embedding
from keras.models import Model

# Encoder for visual input
inputs1 = Input(shape=(4096,))
fe1 = Dropout(0.4)(inputs1)
fe2 = Dense(256, activation='relu')(fe1)

# Encoder for textual input
inputs2 = Input(shape=(300,))
# No changes needed for textual input encoding

# Encoder for sequential input
inputs3 = Input(shape=(max_length,))
se1 = Embedding(vocab_size, 256, mask_zero=True)(inputs3)
se2 = Dropout(0.4)(se1)
se3 = LSTM(256)(se2)

# Decoder
decoder1 = concatenate([fe2, inputs2, se3])  # Concatenating visual, textual, and sequence features
decoder2 = Dense(256, activation='relu')(decoder1)
outputs = Dense(vocab_size, activation='softmax')(decoder2)

model = Model(inputs=[inputs1, inputs2, inputs3], outputs=outputs)
model.compile(loss='categorical_crossentropy', optimizer='adam')

# plot the model
plot_model(model, show_shapes=True, to_file='model_plot.png')

'''# from keras.callbacks import EarlyStopping

# # Define early stopping callback

# Train the model with early stopping
epochs = 10
batch_size = 32
steps = len(train) // batch_size
model.load_weights('/content/drive/MyDrive/major_project/best_weights3.h5')
for i in range(epochs):
    # create data generator
    generator = data_generator(train, mapping, vis_feat, text_feat, tokenizer, max_length, vocab_size, batch_size)
    # fit for one epoch
    model.fit(generator, epochs=epochs, steps_per_epoch=steps, verbose=1)
model.save_weights('best_weights4.h5')'''

from sklearn.model_selection import train_test_split
# early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)

# Split the data into training and validation sets
train_keys, val_keys = train_test_split(train, test_size=0.2, random_state=42)

# Train the model with early stopping
epochs = 10
batch_size = 32
train_steps = len(train_keys) // batch_size
val_steps = len(val_keys) // batch_size

model.load_weights('/content/drive/MyDrive/major_project/best_weights3.h5')
for i in range(epochs):
    # create data generators for training and validation
    train_generator = data_generator(train_keys, mapping, vis_feat, text_feat, tokenizer, max_length, vocab_size, batch_size)
    val_generator = data_generator(val_keys, mapping, vis_feat, text_feat, tokenizer, max_length, vocab_size, batch_size)

    # fit for one epoch with early stopping
    model.fit(train_generator, epochs=1, steps_per_epoch=train_steps, validation_data=val_generator, validation_steps=val_steps, verbose=1, callbacks=[early_stopping])

# Save the trained model weights
model.save_weights('best_weights4.h5')

model.save_weights('/content/drive/MyDrive/major_project/best_weights3.h5')

model.load_weights('/content/best_weights5.h5')

def idx_to_word(integer, tokenizer):
    for word, index in tokenizer.word_index.items():
        if index == integer:
            return word
    return None

# generate caption for an image
def predict_caption(model, v_image, t_image, tokenizer, max_length):
    # add start tag for generation process
    in_text = 'startseq'
    # iterate over the max length of sequence
    for i in range(max_length):
        # encode input sequence
        sequence = tokenizer.texts_to_sequences([in_text])[0]
        # pad the sequence
        sequence = pad_sequences([sequence], max_length)
        # predict next word
        yhat = model.predict([v_image, t_image, sequence], verbose=0)
        # get index with high probability
        yhat = np.argmax(yhat)
        # convert index to word
        word = idx_to_word(yhat, tokenizer)
        # stop if word not found
        if word is None:
            break
        # append word as input for generating next word
        in_text += " " + word
        # stop if we reach end tag
        if word == 'endseq':
            break

    return in_text

from nltk.translate.bleu_score import corpus_bleu
# validate with test data
actual, predicted = list(), list()
for key in tqdm(test):
    # get actual caption
    captions = mapping[key]
    # predict the caption for image
    # print(vis_feat[key].shape)
    # print(text_feat[key].shape)
    a = text_feat[key]
    arr_reshaped = np.reshape(a, (1, 300))
    text_feat[key] = arr_reshaped
    y_pred = predict_caption(model, vis_feat[key], text_feat[key], tokenizer, max_length)
    # split into words
    actual_captions = [caption.split() for caption in captions]
    y_pred = y_pred.split()
    # append to the list
    actual.append(actual_captions)
    predicted.append(y_pred)

# calcuate BLEU score
print("BLEU-1: %f" % corpus_bleu(actual, predicted, weights=(1.0, 0, 0, 0)))
print("BLEU-2: %f" % corpus_bleu(actual, predicted, weights=(0.5, 0.5, 0, 0)))
print("BLEU-3: %f" % corpus_bleu(actual, predicted, weights=(0.33, 0.33, 0.33, 0)))
print("BLEU-4: %f" % corpus_bleu(actual, predicted, weights=(0.25, 0.25, 0.25, 0.25)))

"""BELU SCORES:      
10/3/24:        
ep 10:      
BLEU-1: 0.559933       
BLEU-2: 0.332422         
BLEU-3: 0.207820      
BLEU-4: 0.123746          
                     
11/3/24        
ep 7: bw1     
BLEU-1 - 0.536100       
BLEU-2 - 0.314759      
BLEU-3 - 0.195497        
BLEU-4 - 0.114626      
ep 14: bw2        
BLEU-1: 0.522993      
BLEU-2: 0.303614       
BLEU-3: 0.190420            
BLEU-4: 0.114930      
ep 24: bw3        
BLEU-1: 0.518790       
BLEU-2: 0.294703       
BLEU-3: 0.180555      
BLEU-4: 0.104608    
ep 34: bw4        
BLEU-1: 0.528359       
BLEU-2: 0.303972       
BLEU-3: 0.190665       
BLEU-4: 0.116822             
            
                  
server: bw       
BLEU-1: 0.565240        
BLEU-2: 0.343569       
BLEU-3: 0.220244         
BLEU-4: 0.135081       

server: bw1
BLEU-1: 0.556093       
BLEU-2: 0.336820        
BLEU-3: 0.216499          
BLEU-4: 0.132866        
"""

from PIL import Image
import matplotlib.pyplot as plt
def generate_caption(image_name):
    # load the image
    # image_name = "1001773457_577c3a7d70.jpg"
    image_id = image_name.split('.')[0]
    img_path = os.path.join(BASE_DIR, "Images", image_name)
    image = Image.open(img_path)
    captions = mapping[image_id]
    print('---------------------Actual---------------------')
    for caption in captions:
        print(caption)
    # predict the caption
    a = text_feat[image_id]
    arr_reshaped = np.reshape(a, (1, 300))
    text_feat[image_id] = arr_reshaped
    y_pred = predict_caption(model, vis_feat[image_id], text_feat[image_id], tokenizer, max_length)
    print('--------------------Predicted--------------------')
    print(y_pred)
    plt.imshow(image)

generate_caption("1001773457_577c3a7d70.jpg")

generate_caption("1002674143_1b742ab4b8.jpg")

generate_caption("101669240_b2d3e7f17b.jpg")

generate_caption("1329832826_432538d331.jpg")

generate_caption("1355945307_f9e01a9a05.jpg")

generate_caption("1370615506_2b96105ca3.jpg")

vgg_model = VGG16()
# restructure the model
vgg_model = Model(inputs=vgg_model.inputs, outputs=vgg_model.layers[-2].output)

image_path = '/kaggle/input/images/1.jpeg'
# load image
image = load_img(image_path, target_size=(224, 224))
# convert image pixels to numpy array
image = img_to_array(image)
# reshape data for model
image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
# preprocess image for vgg
image = preprocess_input(image)
# extract features
feature = vgg_model.predict(image, verbose=0)
# predict from the trained model
predict_caption(model, feature, tokenizer, max_length)

